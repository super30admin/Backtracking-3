// Time Complexity : m x n ( 3^L) where m - no. of rows and n - no of col and L - length of word  
// Space Complexity : recursive stack L length of the word
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
class Solution {
    int m, n;
    public boolean exist(char[][] board, String word) {
        
        int m = board.length;
        int n = board[0].length;
        
        for(int i=0; i<m ; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(helper(board, word, i, j, 0))
                    return true;
            }
        }
        return false;
    }
    
    private boolean helper(char[][] board, String word, int i, int j, int index)
    {
         
            System.out.println("i = "+i +" j = "+j+" index = "+index);
       
        //base
        if(index == word.length())
            return true;
        
        if( i < 0 || j < 0 || i == m || j == n || board[i][j] == '#')
            return false;
       
        //logic
        if(board[i][j] == word.charAt(index))
        {
            int[][] dirs = {{0,1}, {0,-1}, {1,0}, {-1, 0}};
            char temp = board[i][j];
            board[i][j] = '#';
            for(int[] d: dirs)
            {
                int r = i +d[0];
                int c = j+ d[1];
                if(helper(board, word, r, c, index+1))
                    return true;
            }
            board[i][j] = temp;
        }
        return false;
        
    }
}
