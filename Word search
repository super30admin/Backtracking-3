// backtracking is when we may have multiple starting points and we need to explore all possible starting points to get the word
// time complexity: O(N * 3^l) -> number of cells in the baord, l is the length of the word, for each character we may need to for in 3 directions
// maximum length of recursion stack would be length of the word O(L)
class Solution {
    public boolean exist(char[][] board, String word) {
      
        for(int i = 0; i<board.length; i++){
           for(int j = 0; j<board[0].length; j++){
               if(board[i][j] == word.charAt(0)){ 
            // we check for first charcter wherever we find in the board an dstart our search from there
                   if(backtrack(board, i, j, word, 0))
                      return true;
                }
            }
        }                  
        return false;
    }
                      
    public boolean backtrack(char[][] board, int i, int j, String word, int index){
        if(index == word.length()) return true; // base case, when i found the word
        if(i< 0 || j <0 || i>= board.length || j>= board[0].length || word.charAt(index) != board[i][j])
            return false; // this base case, allows to chack the baoundaries, invalid cases
        board[i][j] = '*'; // to avoid the use of same charcater more than once
        
        boolean flag = backtrack(bord, i+1, j, word, index+1) || backtrack(board, i, j+1, word, index+1) || backtrack(board, i-1, j, word, index+1) || backtrack(board, i, j-1, word,index+1);
           
        board[i][j] = word.charAt(index); // caharcter comes to its original state, backtrack
                        
        return flag; // backtrack
        
        
        
    }
}
