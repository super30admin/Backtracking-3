//TC:- m*n*3^(length of word)
//SC:- Length of word

class Solution {
    private int [][] dirs;
    int m;
    int n;
    
    public boolean exist(char[][] board, String word) {
        
        if(board == null || board.length == 0 || board[0].length == 0 || board[0] == null)
            return false;
            
        
        m=board.length;
        n=board[0].length;
        
        dirs = new int [][] {{0,1}, {1,0}, {-1,0}, {0,-1}};
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
               if(helper(board, i, j, 0, word)) return true;
            }
            
        }
        
        return false;
    }
    
    private boolean helper(char [][] board, int i, int j, int index, String word)
    {
        //base
        
        if(index == word.length()) 
            return true;
        if(i<0 || j<0 || i==m || j==n || board[i][j] == '#') return false;
            
        
        //action
       if(board[i][j] == word.charAt(index))
       {
           char c = word.charAt(index);
           board[i][j] = '#';
           
           for(int [] dir : dirs )
           {
               int nr = i+dir[0];
               int nc = j+dir[1];
               //Recursion
               if (helper(board, nr, nc, index+1, word)) return true;
           }
           
           //Backtrack
           board[i][j] = c;
       }
        
        return false;
    }
}
