//time com - o(n!)
//space comp - o(n)
//leetcode - Yes

class Solution {
    List<List<String>> result;
    int [][] board;
    public List<List<String>> solveNQueens(int n) {
        result = new ArrayList<>();
        if(n == 0) return result;
        board = new int [n][n];
        helper(0,n);
        return result;
    }
    
    private void helper(int r, int n) {
        //base
        if(r == n) {
            List<String> list = new ArrayList<>();
            for(int i = 0; i<n;i++) {
                StringBuilder s = new StringBuilder();
                for(int j = 0; j<n;j++) {
                    if(board[i][j] == 1) {
                        s.append('Q');
                    } else{
                        s.append('.');
                    }
                }
                list.add(s.toString());
            }
            result.add(list);
            return;
        }
        
        //logic
        for(int j=0;j<n;j++) {
            if(isSafe(r,j,n)) {
                //action
                board[r][j] = 1;
                //recurse
                helper(r+1,n);
                //bakctrack
                board[r][j] = 0;
            }
        }
    }
    
    private boolean isSafe(int r,int c,int n) {
        
        //same col return false
        for(int i =0; i<r;i++){
            if(board[i][c] == 1) {
                return false;
            }
        }
        
        //check left up diagonal 
        int i = r, j = c;
        while(i>= 0 && j>= 0) {
            if(board[i][j] == 1) {
                return false;
            } else {
                i--;j--;
            }
        }
        
         //check right up diagonal 
        i = r; j = c;
        while(i>= 0 && j<n) {
            if(board[i][j] == 1) {
                return false;
            } else {
                i--;j++;
            }
        }
        
        return true;
    }
}