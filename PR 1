// Time Complexity : O(n^(n/2))- where n is the given number O(n*(n-2)*(n-4)..1)
// Space Complexity : O(n*n)- to store all the elements in the board
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :No
// Your code here along with comments explaining your approach: for each row, we pass through each value, if its a safe spot, place the queen there.We then recurse to the next Row and backtrack by reversing those changes. The backtracking makes it possible to check each and every combination.


class Solution {
    List<List<String>> result;
    int m;int [][] board;
    public List<List<String>> solveNQueens(int n) {
        result=new ArrayList<>();
        if(n==0) return result;
        m=n;
        board=new int[m][m];
        backtrack(0);
        return result;
    }
    
    private void backtrack(int r){
        //base
        if(r==m){
           List<String> temp=new ArrayList<>();
           for(int i=0;i<m;i++){
               StringBuilder sb=new StringBuilder();
               for(int j=0;j<m;j++){
                   if(board[i][j]==0){
                       sb.append('.');
                   }
                   else{
                       sb.append('Q');
                   }
               }
               temp.add(sb.toString());
           }
            result.add(temp);
            return;
        }
        //logic
        for(int i=0;i<m;i++){
                   if(isSafe(r,i)){
                       //action
                       board[r][i]=1;
                       //recurse
                       backtrack(r+1);
                       //backtrack
                       board[r][i]=0;
                   }
        }
}
    private boolean isSafe(int r,int c){
        //column check
        for(int k=0;k<r;k++)
        {
            if(board[k][c]==1) return false;
        }
        //left diagonal and right diagonal check.
        int i=r-1;int j=c-1;
        while(i>=0 && j>=0){
            if(board[i][j]==1) return false;
            i--;j--;
        }
        i=r-1;j=c+1;
         while(i>=0 && j<m){
            if(board[i][j]==1) return false;
            i--;j++;
        }
         return true;
    }
   
}