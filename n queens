// Time Complexity : O(n^2)
// Space Complexity : O(n^2) board
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
class Solution {
    int m;
    List<List<String>>  result;
    int[][] board;
    public List<List<String>> solveNQueens(int n) {
        result = new ArrayList<>();
        if(n == 0)
            return result;
        
        m = n;
        board = new int[m][m];
        backtrack(0);
        return result;
        
    }
    
    private void backtrack(int r)
    {
        //base
        if(r==m)
        {
            List<String> ans = new ArrayList<>();
            for(int i=0; i<m; i++)
            {
                StringBuilder sb = new StringBuilder();
                for(int j=0; j<m; j++)
                {
                    if(board[i][j] == 1)
                    {
                        sb.append('Q');
                    }
                    else
                    {
                         sb.append('.');
                    }
                   
                }
                ans.add(sb.toString());
            }
            result.add(ans);
        }
            
        
        //logic
        for(int i=0; i<m; i++)
        {
            if(isSafe(r, i))
            {
                //action
                board[r][i] = 1;
                //recurse
                backtrack(r+1);
                //backtrack
                board[r][i] =0;
            }
                
        }
        
    }
    
    private boolean isSafe(int r, int c)
    {
        //upper cols
        for(int i = 0; i< r; i++)
        {
            if(board[i][c] == 1)
                return false;
        }
        
        //diagonals LEFT upper
        int k=r-1, j=c-1;
        
        while( k >= 0 && j >= 0)
        {
            if(board[k][j] == 1)
                return false;
            k--;
            j--;
        }
        
        //diagonals right upper
        k=r-1;
        j=c+1;
        
        while( k >= 0 && j < m)
        {
            if(board[k][j] == 1)
                return false;
            k--;
            j++;
        }
        
        return true;
    }
}
