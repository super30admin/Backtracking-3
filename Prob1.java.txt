class Solution {
    List<List<String>> result ;
    public List<List<String>> solveNQueens(int n) {
        
        if(n == 0)
            return null;
        result = new ArrayList<>();
        boolean[][] board = new boolean[n][n];
        boolean ins = false;
        helper(board,0);
        return result;
        
    }
    
    
    private void helper(boolean[][] board,int r){
        //base
        if(r == board.length){
            
            List<String> current = new ArrayList<>();
            for(int i=0;i<board.length;i++){
                StringBuffer path = new StringBuffer();
                for(int j=0;j<board[0].length;j++){
                    if(board[i][j])
                        path.append('Q');
                    else
                        path.append('.');
                }
                current.add(path.toString());
            }
            result.add(current);
            return;
        }
              
        
        for(int j=0;j<board[0].length;j++){
            if(!isQueenAttacked(board,r,j)){
                board[r][j] = true;
                helper(board,r+1);
                board[r][j] = false;
            }
        }
        
    }
    
    
    private boolean isQueenAttacked(boolean[][] board,int i,int j){
        
        int r =i,c=j;
        
        //check straight
        
        while(i>=0){
            if(board[i][j])
                return true;
            i--;
        }
        i=r;j=c;
        //check left diagonal
        while(i>=0 && j>=0){
            if(board[i][j])
                return true;
            i--;
            j--;
        }
        i=r;j=c;
        //check right diagonal
        while(i>=0 && j<board.length){
            if(board[i][j])
                return true;
            i--;
            j++;
        }
        
        return false;
    }
}