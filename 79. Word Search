Time complexity: O(m*n)
Space complexity: O(1)
Did this code successfully submitted on leetcode: Yes

class Solution {
    public boolean exist(char[][] board, String word) {
       
        if(board==null || board.length==0)
            return false;
        
        int m = board.length;
        int n= board[0].length;
        
        for(int i=0; i<m;i++){
            for(int j=0;j<n;j++){
                
                if(board[i][j]==word.charAt(0)){
                    if(backtrack(board, word, i, j, 0))
                        return true;
                }
            }
        }
        return false;
    }
    
    int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
    
    private boolean backtrack(char[][] board, String word, int i, int j, int index){
        
        //base case
        if(index==word.length()-1)
             return true;
        
        char temp = board[i][j];
        board[i][j]='#';
        
        //recurssion
        for(int[] dir:dirs){
            int r = i+dir[0];
            int c = j+dir[1];
            
            if(r>=0 && r<board.length && c>=0 && c<board[0].length && index+1<word.length() && board[r][c]==word.charAt(index+1)){
                
                if(backtrack(board, word, r, c, index+1))
                    return true;
                
            }
        }
        
        board[i][j]=temp;
        
        return false;
    }
}
