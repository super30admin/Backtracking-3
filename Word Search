class Solution {
    private int[][] directions = {
        {1,0},            
        {0,-1},
        {0,1},
        {-1,0}

    };
    
    public boolean exist(char[][] board, String word) {
        for(int i =0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(exist(board, i, j, word, 0)){
                    return true;
                }
                
            }
        }
        return false;
        
    }
    
    private boolean exist(char[][] board, int i, int j, String word, int wordIndex){
        
        //base
        if(wordIndex == word.length()){
            return true;
        }
        
        //for i, j
        if(i<0 || i>=board.length || j<0 || j>=board[0].length){
            return false;
        }
        
        //actions
        if(word.charAt(wordIndex) == board[i][j]){   //if word in Index is present in board[i][j]
            
            board[i][j] = '*';  //marking visisted
            
            //exploring childer or neighbours
            for(int[] dir : directions){
                
                int newI = i + dir[0];
                int newJ = j + dir[1];
                if(exist(board, newI, newJ, word, wordIndex+1)){  //newI newJ are neighbors of i & j
                    return true;
                }
            }
            
            
            board[i][j] = word.charAt(wordIndex);
          
        }
        return false;
    }
}
