class Solution {
public:
    int dirs[4][4] = {{0,1},{0,-1},{1,0},{-1,0}};
    bool exist(vector<vector<char>>& board, string word) {
   if(board.size() == 0){
       return false;
   }
        
        for(int i = 0 ; i <board.size(); i++){
            for(int j = 0; j<board[0].size(); j++){
                if(backtrack(board, i , j , word, 0)){
                    return true;
                }
            }
        }
        
        return false;
    }
    
    
    bool backtrack(vector<vector<char>>& board, int i, int j , string word, int wordindex ){
        //base
        if(wordindex == word.length()){
            return true;
        }
        if(i < 0 || i == board.size() || j<0 || j== board[0].size() || board[i][j] == '#'){
            return false;
        }
        ///logic
        if(board[i][j] == word[wordindex]){
        //action
            char ch = board[i][j];
            board[i][j] = '#';
            
        
        for(auto dir : dirs){
            int nr = i + dir[0];
            int nc = j + dir[1];
        
            if(backtrack(board, nr,nc,word,wordindex+1)){
                return true;
            }
        }
            

//             if(nr >= 0 && nr < board.size() && nc >= 0 && nc < board[0].size() && board[nr][nc] != "#" && board[nr][nc] == word[wordindex]){
//                 board[nr][nc] = "#";
//                 backtrack(board,nr,nc,word,index+1);
//                 }
//                 }
        
        
        
        
        //backtrack
        board[i][j] = ch;
    }
        return false;
    }
};
