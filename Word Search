class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        d = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        rows, cols = len(board), len(board[0])
        if rows * cols < len(word):
            return False
        def existHelper(r, c, word_idx):
            if word_idx == len(word):
                return True
            if (
                not 0 <= r <= rows - 1
                or not 0 <= c <= cols - 1
                or board[r][c] == "*"
                or board[r][c] != word[word_idx]
            ):
                return False
            val = board[r][c]
            board[r][c] = "*"
            is_exist = False
            for d_row, d_col in d:
                is_exist = is_exist or existHelper(
                    r + d_row, c + d_col, word_idx + 1
                )
            board[r][c] = val
            return is_exist
        for r in range(rows):
            for c in range(cols):
                if existHelper(r, c, 0):
                    return True
        return False
    
# Time Complexity: O(m * n * (4^l)) ==> l: Length of Word
# Space Complexity: O(l)
# Successfully implemented on Leetcode
