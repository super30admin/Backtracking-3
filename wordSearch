// TC - O((m * n) 3^(L)) where m - no of rows, n - no of cols, L - length of word, 3^L since each letter can move in 3 diff directions
// SC - O(1) we will use inplace modification instead of visited array = O(L) where L - length of word
//passed on leetcode: yes
class Solution {
    String globalWord;
    int m;
    int n;
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0) return false;
        globalWord = word;
        m = board.length;
        n = board[0].length;
        for (int i =0; i< m; i++){
            for (int j=0; j < n; j++) {
                if (helper(board,0,i,j)) return true;
            }
        }
        return false;
    }
        
    private boolean helper(char[][] board, int index,int i, int j){
        //base
         if (index==globalWord.length()){ //if it reaches end of word, then we found it
             return true;
        }
        if (i<0 || j <0 || i>=m || j>=n || board[i][j] == '#') return false;
       //logic
        char ch = globalWord.charAt(index);
        int [][] dirs = {{0,1},{1,0},{-1,0},{0,-1}};
        char letter = board[i][j];
       // System.out.println(letter);
        if (letter == ch){
            board[i][j] = '#'; // if it's visited and part of sequence
            for (int[] dir:dirs){
                int r = i + dir[0];
                int c = j + dir[1];
                if (helper(board,index+1,r,c)) return true; 
             }
            //backtrack
            board[i][j] = letter; // if that side did not work, replace it with original character
            }

        return false;
    }
}
