class Solution {
    private int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
    public boolean exist(char[][] board, String word) {
        if(board == null || board.length == 0 || board[0] == null || board[0].length==0){
            return false;
        }
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j] == word.charAt(0)){
                    if(backtracking(board,i,j,word,0)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    private boolean backtracking(char[][] board, int i, int j,String word, int index){
        if(index == word.length()-1){
            return true;
        }
        char temp = board[i][j];
        board[i][j] ='#';
        
        for(int[] dir : dirs){
            int r = i+dir[0];
            int c = j+dir[1];
            
            if(r>=0 && r<board.length && c>=0 && c< board[0].length && board[r][c] == word.charAt(index+1)){
                if(backtracking(board,r,c,word,index+1)){
                    return true;
                }
            }
        }
        board[i][j] = temp;
        return false;
    }
}

//Runtime : O((n*m)*3^length of string)
