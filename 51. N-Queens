Time complexity: O(n*n!)
Space complexity: O(1)
Did this code successfully submitted on leetcode: Yes

class Solution {
    
    List<List<String>> output = new ArrayList<>();
    
    public List<List<String>> solveNQueens(int n) {
        
        char[][] board = new char[n][n];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        
        //backtracking
        backtrack(board,n,0);
        
        return output;
    }
    
    private void backtrack(char[][] board, int n, int i){
        //base condition
        if(n==0){
           insert(board);
            return;
        }
        
        //recurssion
        for(int j=0;j<board.length;j++){
            if(isSafe(board,i,j)){
                board[i][j]='Q'; 
                backtrack(board, n-1, i+1);
                board[i][j]='.';
            }
        }
    }
    
    private void insert(char[][] board){
        
        List<String> tempList = new ArrayList<>();
        
        for(int i=0;i<board.length;i++){
            String temp = "";
            for(int j=0;j<board.length;j++){
                temp += board[i][j];
            }
            
            tempList.add(temp);
        }
        output.add(tempList);
    }
    
    private boolean isSafe(char[][] board, int i, int j){
        //Column up
        for(int r=0; r<i;r++){
            if(board[r][j]=='Q')
                return false;
        }
        
        //left diagonal
        int x = i-1;
        int y = j-1;
        
        while(x>=0 && y>=0){
            if(board[x][y]=='Q')
                return false;
            
            x--;
            y--;
        }
        
        //right diagonal
        x = i-1;
        y=j+1;
        
        while(x>=0 && y<board.length){
            if(board[x][y]=='Q')
                return false;
            
            x--;
            y++;
        }
        
        return true;
    }
}
