class Solution {
    
    //51. N-Queens
    //Time complexity : O(n!) 
    //Space compelxity : O(m*n)     
    
    
    List<List<String>> result = new ArrayList<>();
     int[][] board ;
    int m; //column
    public List<List<String>> solveNQueens(int n) {
        
         m =n;
        board = new int[n][n];
        backtrack(0);
        return result;
        
    }
    private void backtrack(int r){
        
        //base
        
        if(r == m)
        {
            List<String> rowList = new ArrayList<>();
            
            for(int i =0;i<m;i++){
                StringBuilder sb = new StringBuilder();
                for(int j =0;j<m;j++){
                    if(board[i][j] ==1)
                        sb.append('Q');
                    
                       else
                           sb.append('.');
                }
                rowList.add(sb.toString());
            }
            result.add(rowList);
            return;
            
        }
        
        //logic
        //check for every column
        for(int j =0;j<m;j++){
           if( isSafe(r,j) )
           {
               board[r][j] = 1;
               //recursion
               backtrack(r+1); 
               board[r][j] =0; //if backtrack doesn't work , make it back to 0
           }
        }
    }
    
    private boolean isSafe(int r,int c){
        
        //check for all rows above it
        for(int k =0; k<r; k++){
         if(board[k][c] == 1)
             return false;
        }
        
        //diagonal up left
        int i=r;
        int j =c;
        while(i>=0 && j>=0){
            if(board[i][j]==1)
                 return false;
            i--;
            j--;
              
        }
        
        i =r;
        j=c;
        while(i>=0 && j<m){
            if(board[i][j]==1)
                 return false;
            i--;
            j++;      
        }
        
        return true;
    }
}