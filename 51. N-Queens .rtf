{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww28600\viewh15060\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\
class Solution:\
    result = []\
    def solveNQueens(self, n: int) -> List[List[str]]:\
        self.result = []\
        board = [[False for x in range(n)] for y in range(n)]\
        \
        def isSafe(board, i, j, n):\
            \
            r = i\
            c = j\
            print(board[r][c])\
            #check in above columns\
            while r >= 0:\
                if board[r][c]:\
                    return False\
                r -= 1\
            \
            #check left diagonal\
            r = i\
            c = j\
            while r >= 0 and j >= 0:\
                if board[r][c]:\
                    return False\
                r -= 1\
                c -= 1\
                \
            \
            #check right diagonal\
            r = i\
            c = j\
            while r >= 0 and j < n:\
                if board[r][c]:\
                    return False\
                r -= 1\
                c += 1\
                \
            return True\
        \
        \
        def helper(i,n, board):\
            #base case\
            li = []\
            if i == n:\
                for r in range(n):\
                    sb = ""\
                    for c in range(n):\
                        if board[r][c] == True:\
                            sb += "Q"\
                        else:\
                            sb += "."\
                    li.append(sb)\
                result.append(li)\
            \
            #logic\
            for j in range(n):\
                if isSafe(board[i][j], i, j, n):\
                    board[i][j] = True\
                    helper(i + 1, n, board)\
                    board[i][j] = False\
        \
        helper(0, n, board)\
        return self.result\
                    \
                \
        }