// TC - O(n!) where n - no of rows
// SC - O(n)


class Solution {
    boolean[][] board;
    List<List<String>> result;
    int N;
    public List<List<String>> solveNQueens(int n) {
        N = n;
        board = new boolean[N][N];
        result = new ArrayList<>();
        helper(0);
        return result;
    }
    
    private void helper(int row)
    {
        // base case
        if(row == N)
        {
            List<String> li = new ArrayList<>();
            for(int i = 0; i < N; i++)
            {
                StringBuilder sb = new StringBuilder();
                for(int j = 0; j < N; j++)
                {
                    if(board[i][j])
                    {
                        sb.append('Q');
                    }
                    else
                    {
                        sb.append('.');
                    }
                }
                li.add(sb.toString());
            }
            result.add(li);
            return;
        }
        
        // logic
        for(int col = 0; col < N; col++)
        {
            if(isSafe(row, col))
            {
                //action 
                board[row][col] = true;
                //recurse
                helper(row + 1);
                //backtrack
                board[row][col] = false;
            }
        }
    }
    
    private boolean isSafe(int row, int col)
    {
        // check vertically
        for(int i = 0 ; i < row; i++)
        {
            if(board[i][col])
            {
                return false;
            }
        }
        
        // check diagonal left
        int i = row, j = col;
        
        while(i >= 0 && j >= 0)
        {
            if(board[i][j])
                return false;
            i--;
            j--;
        }
        
        // check diagonal right
        i = row;
        j = col;
        
        while(i >= 0 && j < N)
        {
            if(board[i][j])
            {
                return false;
            }
            i--;
            j++;
        }
        return true;
    }
}
