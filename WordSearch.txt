// Time Complexity : O(4 ^ m+n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    public boolean exist(char[][] board, String word) {
        /* edge case */
      if(word.length() ==0 || word  == null) 
          return true;
      for(int i =0; i<board.length;i++)
         for(int j =0;j<board[0].length;j++)
      {
             /* find the starting charcater of word and  now dfs through it */
            if(board[i][j] == word.charAt(0) && dfs(board,word,0,i,j))
                    return true;
       }
        
        return false;
    }
    
    public boolean dfs(char[][] board, String word,int index,int i,int j){
        
        /* edge case */
        if(index == word.length()) 
            return true;
        /* if not in boundaries or charcater does not match */
        if(i<0 || i>=board.length|| j<0 || j>=board[0].length || word.charAt(index) != board[i][j])
            return false;
        /* its back track problem so need to store the character in temp varibale */
        char temp = board[i][j];
        board[i][j] = '.'; // action so we dont revisit it
        /* if it is found in any of four direction */
        boolean found = dfs(board,word,index+1,i+1,j)||
            dfs(board,word,index+1,i,j-1)||
            dfs(board,word,index+1,i-1,j)||
            dfs(board,word,index+1,i,j+1);
        
        /* change value back to it original*/
        board[i][j] = temp;
        return found;
    }
}