# N-Queens

#The time complexity of this solution is O(N!), where N is the size of the chessboard. 
#The space complexity is also O(N^2) to store the chessboard configurations.

class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        def is_safe(board, row, col):
            # Check if there is any queen in the same column
            for i in range(row):
                if board[i][col] == 'Q':
                    return False
            
            # Check upper left diagonal
            for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
                if board[i][j] == 'Q':
                    return False
            
            # Check upper right diagonal
            for i, j in zip(range(row-1, -1, -1), range(col+1, n)):
                if board[i][j] == 'Q':
                    return False
            
            return True

        def backtrack(row, board):
            if row == n:
                result.append(["".join(row) for row in board])
                return
            
            for col in range(n):
                if is_safe(board, row, col):
                    board[row][col] = 'Q'
                    backtrack(row + 1, board)
                    board[row][col] = '.'

        result = []
        empty_board = [['.'] * n for _ in range(n)]
        backtrack(0, empty_board)
        return result

# Example usage:
sol = Solution()
print(sol.solveNQueens(4))  # Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
print(sol.solveNQueens(1))  # Output: [["Q"]]
