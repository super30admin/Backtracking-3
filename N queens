// time complexity: O(N!) For first queeen , we have n choices and for last queen we have 1 choice
// sapvce complexity: O(N) : N queen in implict stack
class Solution {
    public List<List<String>> solveNQueens(int n) {
        
        // I have been given only n as input
        // I ahve to create the board
        char[][] board = new char[n][n];
        
        // I have to initialize the board
        for(int i =0; i<board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                board[i][j] = '.';
            }
        }
        List<List<String>> output = new ArrayList<>();
        // column wise traversal
        helper(board, 0, output);
        
        return output;
    }
    
    public void helper(char[][] board, int colIndex, List<List<String>> output){
        
        if(colIndex == board[0].length){
            output.add(constructOutput(board));
            return;
        }
        
        // for all rows of that colum
        for(int i =0; i < board.length; i++){
            if(validate(board, i, colIndex)){
                // we make a choice
                board[i][colIndex] = 'Q';
                // we follow that path
                helper(board, colIndex+1, output);
                // undo our choice
                board[i][colIndex] = '.';
            }
        }
    }
    
    public boolean validate(char[][] board, int row, int col){
        for(int i =0; i<board.length; i++){
            for(int j = 0; j < col; j++){
                // Q on same row || q on lower diagnaol || q on upper diagnol
                if(board[i][j] == 'Q' && (i == row || row+j == col+i || row + col == i + j ))
                    return false;
            }
        }
        return true;
    }
    
    public List<String> constructOutput(char[][] board){
        List<String> result = new ArrayList<>();
        for(int i =0; i< board.length; i++){
            String str = new String(board[i]);
            result.add(str);
        }
        return result;
    }
}
