PROBLEM - 1
// Time Complexity :
// Space Complexity :O(n)
// Did this code successfully run on Leetcode :Yes
 
 class Solution {
    func solveNQueens(_ n: Int) -> [[String]] {
        var results = [[[Character]]]()
        let map = Array(repeating: Array(repeating: Character("."), count: n), count: n)
        solve(map, 0, &results)
        return results.map { $0.map { String($0) } }
    }
    
    func solve(_ map: [[Character]], _ row: Int, _ results: inout [[[Character]]]) {
        let n = map.count
        guard row < n else { return }
        
        // "x" means cannot place "Q"
        for col in 0..<n where map[row][col] != "x" {
            var map = map
            
            // place "Q" and clear "x" of this row
            for j in 0..<n {
                map[row][j] = (j == col) ? "Q" : "."
            }

            if row == n - 1 {
                results.append(map)

            } else {
                // mark "|", "/" and "\" paths as "x"
                for i in row+1..<n {
                    map[i][col] = "x"
                    let step = i - row
                    if col + step < n {
                        map[i][col + step] = "x"
                    }
                    if col - step >= 0 {
                        map[i][col - step] = "x"
                    }
                }
                solve(map, row + 1, &results)
            }
        }        
    }
}

PROBLEM - 2
// Time Complexity :O(n^4*L)
// Space Complexity :
// Did this code successfully run on Leetcode :Yes

class Solution {
    func exist(_ board: [[Character]], _ word: String) -> Bool {
        
        let char = word[word.index(word.startIndex, offsetBy: 0)]
        
        for row in 0..<board.count {
            for col in 0..<board[0].count {
                if search(board, word, row, col, 0) { 
                    return true
                }
            }
        }
        
        return false
    }
    
    func search(_ board: [[Character]], _ word: String, _ row: Int, _ col: Int, _ index: Int) -> Bool {
        if index >= word.count { return true }
        
        if row < 0  || row >= board.count || col < 0 || col >= board[0].count {
            return false
        }
        
        let char = word[word.index(word.startIndex, offsetBy: index)]
        if board[row][col] == "-" || board[row][col] != char { 
            return false 
        }
        
        var board = board
        board[row][col] = "-"
        
        let ans = search(board, word, row+1, col, index+1) ||
                  search(board, word, row-1, col, index+1) ||
                  search(board, word, row, col+1, index+1) ||
                  search(board, word, row, col-1, index+1) 
        
        return ans
    }
}
