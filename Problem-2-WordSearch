//TC- O(n * (3^l)) 
//SC- O(l) - length of word search
class Solution {
    int m; int n;
    private int[][] dirs;
    public boolean exist(char[][] board, String word) {
        if(board == null || board.length == 0) return false;
        m = board.length;
        n = board[0].length;
        dirs = new int[][]{{0,1},{1,0},{-1,0},{0,-1}};
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(word.charAt(0) == board[i][j])
                {
                    if(backtrack(board, i, j, word, 0)) return true;
                }
            }
        }
        return false;
    }
    private boolean backtrack(char[][] board,int i, int j, String word, int index)
    {
        if(index == word.length()) return true;
        if(i < 0 || j < 0 || i == m || j == n || board[i][j] == '#') return false;
        if(board[i][j] == word.charAt(index))
        {
            board[i][j] = '#';
            for(int[] dir : dirs)
            {
                int nr = i + dir[0];
                int nc = j + dir[1];
                
                if(backtrack(board, nr, nc, word, index + 1)) return true;
                
            }   
            board[i][j] = word.charAt(index);
        }
        return false;
    }
}
