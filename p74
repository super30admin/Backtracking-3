class Solution {
    public List<List<String>> solveNQueens(int n) 
    {
        List<List<String>> ans = new ArrayList<>();
        boolean[][]arr = new boolean[n][n];
        
        nQueens(arr, ans, 0);        
        
        return ans;
    }
    
    public boolean isQueenSafeToPlace(boolean[][] arr, int r, int c) 
    {
        for(int i = r, j = c; i>=0 && j>=0; i--,j--) 
        {
            if(arr[i][j] == true) 
            {
                return false;
            }
        }
        
        for(int i = r; i>=0; i--) 
        {
            if(arr[i][c] == true) 
            {
                return false;
            }
        }
        
        for(int i = r, j = c; i>=0 && j<arr.length; i--,j++) 
        {
            if(arr[i][j] == true) 
            {
                return false;
            }
        }
        
        return true;
    }
    public void nQueens(boolean[][]arr, List<List<String>>ans, int row) 
    {
        if(row == arr.length) 
        {
            List<String>list = new ArrayList<>();
            for(int i = 0; i<arr.length; i++) 
            {
                
                StringBuilder sb = new StringBuilder();
                for(int j = 0; j<arr.length; j++) 
                {
                    if(arr[i][j] == true) 
                    {
                        sb.append("Q");
                    }
                    else {
                        sb.append(".");
                    }
                }
                list.add(sb.toString());
            }
            ans.add(list);
            return;
        }
        
        for(int col = 0; col<arr.length; col++) 
        {

            if(isQueenSafeToPlace(arr, row, col) == true) 
            {
                arr[row][col] = true;
                nQueens(arr, ans, row + 1);
                arr[row][col] = false;
            }
        }
    }
}
